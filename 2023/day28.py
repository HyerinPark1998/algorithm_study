# https://school.programmers.co.kr/learn/courses/30/lessons/42889
# 실패율
# 문제 설명
# 슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.
# 이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 오렐리를 위해 실패율을 구하는 코드를 완성하라.
# 실패율은 다음과 같이 정의한다.
# 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
# 전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.
# 제한사항
# 스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
# stages의 길이는 1 이상 200,000 이하이다.
# stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
# 각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
# 단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
# 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
# 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.

# 실패율을 구할 때 필요한 것들은 스테이지 당 도달한 플레이어의 수, 해당 스테이지를 클리어하지 못한 플레이어의 수.
# 제공되는 건 전체 스테이지의 개수 N, 사용자가 멈춰 있는 스테이지의 번호들 stages
# stages에 존재하는 N+1은 마지막 스테이지까지 클리어 한 사용자
# 실패율이 높은 스테이지부터 내림차순으로 번호 반환

# 먼저 알아야할 게 N번째 스테이지를 도달한 사람들의 수, 클리어하지 못한 수
# 5번째 스테이지까지 있으면 3번째에 멈춰있는 경우 1,2번재 스테이지는 클리어한 경우이다.
# 스테이지를 키값으로, 실패율을 밸류값으로 가진 딕셔너리를 정의해서 내림차순으로 번호 반환하기.
N = 4
stages = [4, 4, 4, 4, 4]

dic = {}


for n in range(1, N+1):
    # 낮은 스테이지부터 도달한 플레이어수 확인하기.
    dic[n] = len([x for x in stages if x >= n])
    # 클리어하지 못한 수 파악하고 나누기
    dic[n] = stages.count(n)/dic[n]
# 실패율을 기준으로 내림차순으로 반환하기
print(sorted(dic, key=lambda x: dic[x], reverse=True))

# 음 런타임 에러가 떴는데 왜일까..
# 예시 테스트 케이스를 사용하여 검사했을 때 모두 통과가 되서 인지하지 못했는데 0으로 나눌경우 런타임 에러가 뜬다고 한다. 그래서 예외 설정을 해주니 무사히 통과하였다.

# 최종 함수


def solution(N, stages):
    dic = {}
    for n in range(1, N+1):
        dic[n] = len([x for x in stages if x >= n])
        if dic[n] != 0:
            dic[n] = stages.count(n)/dic[n]
    return sorted(dic, key=lambda x: dic[x], reverse=True)
